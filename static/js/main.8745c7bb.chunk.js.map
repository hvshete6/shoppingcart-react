{"version":3,"sources":["logo.svg","Components/Cart.js","Components/CartItem.js","Components/BuyPage.js","App.js","serviceWorker.js","index.js"],"names":["Cart","cartItem","removeItem","buyNow","amount","forEach","item","parseFloat","productPrice","Container","fluid","className","ListGroup","map","ListGroupItem","Row","Col","height","src","tinyImage","productName","Button","color","onClick","id","length","Card","CardHeader","CardBody","CardFooter","CartItem","product","addInCart","CardImg","top","width","smallImage","CardTitle","CardText","outline","BuyPage","useState","setProduct","fetchPhotos","a","Axios","get","data","photos","allProduct","photo","medium","tiny","random","word","commerce","price","uuidv4","useEffect","md","App","setCartItem","findIndex","array","toast","type","filter","singleItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8745c7bb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from \"react\";\nimport {\n  Container,\n  ListGroup,\n  ListGroupItem,\n  Button,\n  CardHeader,\n  CardBody,\n  Card,\n  CardFooter,\n  Col,\n  Row\n} from \"reactstrap\";\n\nconst Cart = ({ cartItem, removeItem, buyNow }) => {\n  let amount = 0;\n\n  cartItem.forEach(item => {\n    amount = parseFloat(amount) + parseFloat(item.productPrice);\n  });\n\n  return (\n    <Container fluid>\n      <h1 className=\"text-success\">Your Cart</h1>\n      <ListGroup>\n        {cartItem.map(item => (\n          <ListGroupItem key={item.id}>\n            <Row>\n              <Col>\n                <img height={80} src={item.tinyImage} />\n              </Col>\n              <Col className=\"text-center\">\n                <div className=\"text-primary\">{item.productName}</div>\n                <span>price :- {item.productPrice}</span>\n                <Button color=\"danger\" onClick={() => removeItem(item)}>\n                  Remove\n                </Button>\n              </Col>\n            </Row>\n          </ListGroupItem>\n        ))}\n      </ListGroup>\n      {/* If everything is empty */}\n      {cartItem.length >= 1 ? (\n        <Card className=\"text-center mt-3\">\n          <CardHeader>Grand Total</CardHeader>\n          <CardBody>\n            Your amount for {cartItem.length} product is {amount}\n          </CardBody>\n          <CardFooter>\n            <Button color=\"success\" onClick={buyNow}>\n              pay here\n            </Button>\n          </CardFooter>\n        </Card>\n      ) : (\n        <h1 className=\"text-warning\">Cart is empty</h1>\n      )}\n    </Container>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\n\nimport {\n  Card,\n  CardImg,\n  CardText,\n  CardBody,\n  CardTitle,\n  Button\n} from \"reactstrap\";\n\nconst CartItem = ({ product, addInCart }) => {\n  return (\n    <Card className=\"mt-2 mb-1\">\n      <CardImg top height=\"250\" width=\"100%\" src={product.smallImage} />\n      <CardBody className=\"text-center\">\n        <CardTitle>{product.productName}</CardTitle>\n        <CardText className=\"secondary\">\n          price: RS {product.productPrice}\n        </CardText>\n        <Button outline color=\"success\" onClick={() => addInCart(product)}>\n          Buy Now\n        </Button>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default CartItem;\n","import React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport CartItem from \"./CartItem\";\nimport {v4 as uuidv4} from \"uuid\";\n\nimport { random, commerce } from \"faker\";\nimport { Container, Col, Row } from \"reactstrap\";\n\nconst apiKey = \"INSET_YOUR_KEY_HERE\";\n\nconst url = \"https://api.pexels.com/v1/search?query=laptop&per_page=6&page=1\";\nconst localurl = \"http://myjson.dit.upm.es/api/bins/111i\";\nconst BuyPage = ({ addInCart }) => {\n  const [product, setProduct] = useState([]);\n\n  //   const fetchPhotos = async () => {\n  //     const response = await Axios.get(url, {\n  //       header: {\n  //         Authorization: apiKey\n  //       }\n  //     });\n\n  const fetchPhotos = async () => {\n    const { data } = await Axios.get(localurl, {});\n\n    const { photos } = data;\n\n    const allProduct = photos.map(photo => ({\n      smallImage: photo.src.medium,\n      tinyImage: photo.src.tiny,\n      productName: random.word(),\n      productPrice: commerce.price(),\n      id: uuidv4()\n    }));\n\n    setProduct(allProduct);\n  };\n\n  useEffect(() => {\n    fetchPhotos();\n  }, []);\n\n  return (\n    <Container fluid>\n      <h1 className=\"text-success text-center\">Buy Page</h1>\n      <Row>\n        {product.map(product => (\n          <Col md={4} key={product.id}>\n            <CartItem product={product} addInCart={addInCart} />\n          </Col>\n        ))}\n      </Row>\n    </Container>\n  );\n};\n\nexport default BuyPage;\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\nimport {ToastContainer, toast } from \"react-toastify\";\n\nimport {Container, Row, Col} from \"reactstrap\";\n\nimport Cart from \"./Components/Cart\";\nimport CartItem from \"./Components/CartItem\";\nimport BuyPage from \"./Components/BuyPage\";\n\n\n\nfunction App() {\n  const [cartItem, setCartItem] = useState([]);\n\n  const addInCart = item => {\n    const isAlreadyAdded = cartItem.findIndex(function(array) {\n      return array.id === item.id;\n    });\n\n    if (isAlreadyAdded !== -1) {\n      toast(\"already added in cart\", {\n        type: \"error\"\n      });\n      return;\n    }\n\n    setCartItem([...cartItem, item]);\n  };\n\n  const buyNow = () => {\n    setCartItem([]);\n\n    toast(\"Purchase Complete\", {\n      type: \"success\"\n    });\n  };\n\n  const removeItem = item => {\n    setCartItem(cartItem.filter(singleItem => singleItem.id !== item.id));\n  };\n\n  return (\n    <Container fluid>\n      <ToastContainer/>\n      <Row>\n        <Col md=\"8\">\n          <BuyPage addInCart={addInCart} />\n        </Col>\n        <Col md=\"4\">\n          <Cart  cartItem={cartItem} removeItem={removeItem} buyNow={buyNow} />\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}